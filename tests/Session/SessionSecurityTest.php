<?php

declare(strict_types=1);

namespace Dzentota\Session\Tests\Session;

use Dzentota\Session\SessionSecurity;
use PHPUnit\Framework\TestCase;

class SessionSecurityTest extends TestCase
{
    public function testIsSecureConnectionWithHttps(): void
    {
        $server = ['HTTPS' => 'on'];
        $this->assertTrue(SessionSecurity::isSecureConnection($server));

        $server = ['HTTPS' => 'off'];
        $this->assertFalse(SessionSecurity::isSecureConnection($server));
    }

    public function testIsSecureConnectionWithForwardedProto(): void
    {
        $server = ['HTTP_X_FORWARDED_PROTO' => 'https'];
        $this->assertTrue(SessionSecurity::isSecureConnection($server));

        $server = ['HTTP_X_FORWARDED_PROTO' => 'http'];
        $this->assertFalse(SessionSecurity::isSecureConnection($server));
    }

    public function testIsSecureConnectionWithForwardedSsl(): void
    {
        $server = ['HTTP_X_FORWARDED_SSL' => 'on'];
        $this->assertTrue(SessionSecurity::isSecureConnection($server));

        $server = ['HTTP_X_FORWARDED_SSL' => 'off'];
        $this->assertFalse(SessionSecurity::isSecureConnection($server));
    }

    public function testIsSecureConnectionWithPort(): void
    {
        $server = ['SERVER_PORT' => '443'];
        $this->assertTrue(SessionSecurity::isSecureConnection($server));

        $server = ['SERVER_PORT' => '80'];
        $this->assertFalse(SessionSecurity::isSecureConnection($server));
    }

    public function testGenerateRandomBytes(): void
    {
        $length = 32;
        $bytes = SessionSecurity::generateRandomBytes($length);

        // Check the length of generated bytes
        $this->assertEquals($length, strlen($bytes));

        // Check that two consecutive calls give different results
        $bytes2 = SessionSecurity::generateRandomBytes($length);
        $this->assertNotEquals($bytes, $bytes2);
    }

    public function testHashIpAddress(): void
    {
        $ip = '192.168.1.1';

        // Hash without salt
        $hash = SessionSecurity::hashIpAddress($ip);
        $this->assertIsString($hash);
        $this->assertEquals(64, strlen($hash)); // SHA-256 gives 64 characters in hexadecimal representation

        // Hash with custom salt
        $hashWithSalt = SessionSecurity::hashIpAddress($ip, 'custom-salt');
        $this->assertNotEquals($hash, $hashWithSalt);

        // Check that identical IPs with identical salt give identical hashes
        $this->assertEquals($hash, SessionSecurity::hashIpAddress($ip));
        $this->assertEquals($hashWithSalt, SessionSecurity::hashIpAddress($ip, 'custom-salt'));
    }

    public function testGetClientIp(): void
    {
        // Test with X-Forwarded-For
        $server = ['HTTP_X_FORWARDED_FOR' => '203.0.113.1, 192.168.1.1'];
        $this->assertEquals('203.0.113.1', SessionSecurity::getClientIp($server));

        // Test with Client-IP
        $server = ['HTTP_CLIENT_IP' => '203.0.113.2'];
        $this->assertEquals('203.0.113.2', SessionSecurity::getClientIp($server));

        // Test with X-Real-IP
        $server = ['HTTP_X_REAL_IP' => '203.0.113.3'];
        $this->assertEquals('203.0.113.3', SessionSecurity::getClientIp($server));

        // Test with REMOTE_ADDR
        $server = ['REMOTE_ADDR' => '203.0.113.4'];
        $this->assertEquals('203.0.113.4', SessionSecurity::getClientIp($server));

        // Test with multiple headers (should use the first one in priority order)
        $server = [
            'HTTP_X_FORWARDED_FOR' => '203.0.113.1',
            'HTTP_CLIENT_IP' => '203.0.113.2',
            'REMOTE_ADDR' => '203.0.113.4'
        ];
        $this->assertEquals('203.0.113.1', SessionSecurity::getClientIp($server));

        // Test without headers
        $server = [];
        $this->assertEquals('0.0.0.0', SessionSecurity::getClientIp($server));
    }

    public function testsafeCompare(): void
    {
        $this->assertTrue(SessionSecurity::safeCompare('same-string', 'same-string'));
        $this->assertFalse(SessionSecurity::safeCompare('string-a', 'string-b'));
    }
}
